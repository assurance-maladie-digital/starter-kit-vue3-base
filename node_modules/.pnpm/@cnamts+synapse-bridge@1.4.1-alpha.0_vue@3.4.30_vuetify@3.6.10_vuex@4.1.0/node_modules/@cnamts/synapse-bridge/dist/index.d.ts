import { ActionMethod } from 'vuex';
import { ActionTree } from 'vuex';
import type { AllLanguagesChar } from './types';
import { AxiosResponse } from 'axios';
import { BufferSource as BufferSource_2 } from './types';
import { ChipItem } from './types';
import { ChipItem as ChipItem_2 } from '../../elements/ChipList/types';
import { ComponentOptionsMixin } from 'vue';
import { Computed } from 'vuex';
import { CookiesPageItems } from './types';
import type { CurrentLangData } from './types';
import { Customizable } from '../../mixins/customizable/types';
import { DataListActionEvent } from '../../patterns/DataListGroup/types';
import type { DataListGroupItems } from './types';
import { DataListGroupItems as DataListGroupItems_2 } from '../../patterns/DataListGroup/types';
import { DataListIcons } from './types';
import type { DataListIcons as DataListIcons_2 } from '../../elements/DataList/types';
import { DataListItem } from './types';
import type { DataOptions } from './types';
import { Dayjs } from 'dayjs';
import dayjs from 'dayjs';
import { DefineComponent } from 'vue';
import { Dimensions } from '../../types';
import { ErrorMessages } from '../types';
import { ErrorMessages as ErrorMessages_2 } from '../../rules/types';
import type { ExternalLink } from './types';
import { ExtractPropTypes } from 'vue';
import { FileInfo } from './types';
import { FileItem } from './types';
import { GetterTree } from 'vuex';
import type { GroupOption } from './types';
import type { HTMLInputEvent } from '../../patterns/FileUpload/types';
import { IconInfo } from './types';
import { IndexedObject } from '../../types';
import { ItemClass } from './types';
import type { Languages } from './types';
import { LinkItem } from './types';
import type { LogoInfo } from './types';
import { MenuItem } from './types';
import { Module } from 'vuex';
import { MutationTree } from 'vuex';
import type { NavigationItem } from './types';
import { NotificationState } from './types';
import { Options } from './types';
import type { Position } from './types';
import { Preferences } from './types';
import { PropType } from 'vue';
import { PublicProps } from 'vue';
import { Ref } from 'vue';
import { RootState } from '../';
import { RouteLocationNormalized } from 'vue-router';
import { RouteLocationRaw } from 'vue-router';
import { RouteRecordRaw } from 'vue-router';
import type { SearchListItem } from './types';
import type { SelectBtnItem } from './types';
import type { SelectBtnValue } from './types';
import type { Service } from './types';
import { SocialMediaLink } from './SocialMediaLinks/types';
import type { SortOption } from './types';
import { ValidationRule } from '../../rules/types';
import { ValidationRule as ValidationRule_2 } from '../types';

declare enum A11yComplianceEnum {
    NON_COMPLIANT = "non-compliant",
    PARTIALLY_COMPLIANT = "partially-compliant",
    FULLY_COMPLIANT = "fully-compliant"
}

export declare const actions: ActionTree<NotificationState, RootState>;

declare enum AlertTypeEnum {
    INFO = "info",
    SUCCESS = "success",
    WARNING = "warning",
    ERROR = "error"
}

export declare const AlertWrapper: DefineComponent<{
    type: {
        type: PropType<AlertTypeEnum>;
        default: AlertTypeEnum;
        validator: (value: string) => boolean;
    };
    dismissible: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    locales: {
        close: string;
    };
    closeIcon: string;
}, {
    alertIcon(): string;
}, {
    dismissAlert(): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    type: {
        type: PropType<AlertTypeEnum>;
        default: AlertTypeEnum;
        validator: (value: string) => boolean;
    };
    dismissible: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    type: AlertTypeEnum;
    outlined: boolean;
    dismissible: boolean;
}, {}>;

export declare const BackBtn: DefineComponent<{
    hideBackIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    backIcon: string;
    locales: {
        label: string;
    };
}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    hideBackIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    dark: boolean;
    hideBackIcon: boolean;
}, {}>;

export declare const BackToTopBtn: DefineComponent<{
    threshold: {
        type: NumberConstructor;
        default: number;
    };
    nudgeRight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    nudgeBottom: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}, unknown, {
    topIcon: string;
    showBtn: boolean;
    locales: {
        label: string;
    };
}, {
    targetSelector(): string | null;
    isMobile(): boolean;
    btnStyle(): Record<string, string>;
    minWidth(): string | null;
    labelClasses(): Record<string, boolean>;
}, {
    onScroll(e: MouseEvent): void;
    scrollToTop(): void;
}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    threshold: {
        type: NumberConstructor;
        default: number;
    };
    nudgeRight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    nudgeBottom: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    target: string;
    threshold: number;
    nudgeRight: string | number;
    nudgeBottom: string | number;
}, {}>;

/** Compute a size in bytes into an human readable value */
export declare function calcHumanFileSize(size: number, fileSizeUnits: string[], separator?: string): string;

export declare const ChipList: DefineComponent<{
    items: {
        type: PropType<ChipItem[]>;
        default: () => never[];
    };
    overflowLimit: {
        type: NumberConstructor;
        default: number;
    };
}, unknown, {
    locales: {
        closeBtnLabel: string;
        reset: string;
    };
    deleteIcon: string;
    upIcon: string;
}, {
    showOverflowChip(): boolean;
    overflowText(): string;
    filteredItems(): ChipItem[];
}, {
    emitRemoveEvent(item: ChipItem): void;
    emitResetEvent(): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    items: {
        type: PropType<ChipItem[]>;
        default: () => never[];
    };
    overflowLimit: {
        type: NumberConstructor;
        default: number;
    };
}>>, {
    items: ChipItem[];
    overflowLimit: number;
}, {}>;

export declare const ContextualMenu: DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    items: {
        type: PropType<MenuItem[]>;
        default: () => never[];
    };
}, unknown, unknown, {}, {
    setHash(hash: string): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    items: {
        type: PropType<MenuItem[]>;
        default: () => never[];
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    items: MenuItem[];
    modelValue: string;
}, {}>;

/** Convert a value to CSS unit */
export declare function convertToUnit(str: string | number | null | undefined, unit?: string): string | undefined;

export declare const CookieBanner: DefineComponent<{
    cookiesRoute: {
        type: PropType<string | RouteRecordRaw>;
        default: () => {
            name: string;
        };
    };
}, unknown, {
    locales: {
        label: string;
        title: string;
        closeBtn: string;
        description: string;
        moreInformationLabel: string;
        customizeBtnText: string;
        rejectBtnText: string;
        acceptBtnText: string;
    };
    closeIcon: string;
    active: boolean;
}, {
    btnWidth(): string;
}, {
    reject(): void;
    accept(): void;
}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    cookiesRoute: {
        type: PropType<string | RouteRecordRaw>;
        default: () => {
            name: string;
        };
    };
}>>, {
    cookiesRoute: string | RouteRecordRaw;
}, {}>;

export declare const CookiesPage: DefineComponent<{
    items: {
        type: PropType<CookiesPageItems>;
        required: true;
    };
}, unknown, {
    locales: {
        title: string;
        description: string;
        cookieDefinition: string;
        rejectAll: string;
        acceptAll: string;
        saveBtn: string;
    };
    preferences: Preferences;
}, {
    filteredPreferences(): Partial<Preferences>;
}, {
    setGlobalPreferences(value: boolean): void;
    submitForm(): Promise<void>;
}, ComponentOptionsMixin, ComponentOptionsMixin, "submit"[], "submit", PublicProps, Readonly<ExtractPropTypes<{
    items: {
        type: PropType<CookiesPageItems>;
        required: true;
    };
}>> & {
    onSubmit?: ((...args: any[]) => any) | undefined;
}, {}, {}>;

export declare const CopyBtn: DefineComponent<{
    label: {
        type: StringConstructor;
        required: true;
    };
    textToCopy: {
        type: PropType<string | (() => string)>;
        required: true;
    };
    hideTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltipDuration: {
        type: NumberConstructor;
        default: number;
    };
}, unknown, {
    tooltip: boolean;
    copyIcon: string;
    locales: {
        tooltip: string;
    };
}, {}, {
    copy(): void;
}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    label: {
        type: StringConstructor;
        required: true;
    };
    textToCopy: {
        type: PropType<string | (() => string)>;
        required: true;
    };
    hideTooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltipDuration: {
        type: NumberConstructor;
        default: number;
    };
}>>, {
    hideTooltip: boolean;
    tooltipDuration: number;
}, {}>;

/** Copy text to the clipboard */
export declare function copyToClipboard(textToCopy: string): void;

export declare const CustomIcon: DefineComponent<{
    /**
     * The color of the icon (any CSS value)
     * By default it's inherited from the text color
     */
    color: {
        type: StringConstructor;
        default: string;
    };
    /** Make the icon small (1em) */
    small: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Make the icon medium (1.5em) */
    medium: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Make the icon large (1.85em) */
    large: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Make the icon extra large (2.25em) */
    xLarge: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The CSS size of the icon (width/height)
     * By default, the size is 1.35em (between small & medium)
     */
    size: {
        type: StringConstructor;
        default: undefined;
    };
    /**
     * The accessible label of the icon
     * By default, the icon is hidden from screen readers
     */
    label: {
        type: StringConstructor;
        default: undefined;
    };
}, unknown, unknown, {}, {
    getIcon(): any;
}, DefineComponent<{
    icon: {
        type: StringConstructor;
        default: undefined;
    };
}, unknown, {
    icons: {
        [key: string]: string;
    };
}, {
    themeIcon(): boolean;
}, {
    getThemeIcon(): any;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    icon: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    icon: string;
}, {}>, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    /**
     * The color of the icon (any CSS value)
     * By default it's inherited from the text color
     */
    color: {
        type: StringConstructor;
        default: string;
    };
    /** Make the icon small (1em) */
    small: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Make the icon medium (1.5em) */
    medium: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Make the icon large (1.85em) */
    large: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Make the icon extra large (2.25em) */
    xLarge: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * The CSS size of the icon (width/height)
     * By default, the size is 1.35em (between small & medium)
     */
    size: {
        type: StringConstructor;
        default: undefined;
    };
    /**
     * The accessible label of the icon
     * By default, the icon is hidden from screen readers
     */
    label: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    label: string;
    small: boolean;
    color: string;
    size: string;
    medium: boolean;
    large: boolean;
    xLarge: boolean;
}, {}>;

export declare const DataList: DefineComponent<{
    items: {
        type: PropType<DataListItem[]>;
        required: true;
    };
    icons: {
        type: PropType<DataListIcons | undefined>;
        default: undefined;
    };
    listTitle: {
        type: StringConstructor;
        default: undefined;
    };
    titleClass: {
        type: StringConstructor;
        default: string;
    };
    row: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemsNumberLoading: {
        type: NumberConstructor;
        default: number;
    };
    headingLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderHtmlValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, unknown, {
    label(): string | undefined;
}, {
    getIcon(iconName?: string): string | undefined;
    getItemClass(index: number, itemClass?: string): ItemClass;
}, DefineComponent<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}, unknown, unknown, {
    widthStyles(): IndexedObject<string | undefined>;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}>>, {
    maxWidth: string | number | undefined;
    minWidth: string | number | undefined;
    width: string | number | undefined;
}, {}>, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    items: {
        type: PropType<DataListItem[]>;
        required: true;
    };
    icons: {
        type: PropType<DataListIcons | undefined>;
        default: undefined;
    };
    listTitle: {
        type: StringConstructor;
        default: undefined;
    };
    titleClass: {
        type: StringConstructor;
        default: string;
    };
    row: {
        type: BooleanConstructor;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemsNumberLoading: {
        type: NumberConstructor;
        default: number;
    };
    headingLoading: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderHtmlValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    placeholder: string;
    loading: boolean;
    icons: DataListIcons | undefined;
    row: boolean;
    renderHtmlValue: boolean;
    listTitle: string;
    titleClass: string;
    itemsNumberLoading: number;
    headingLoading: boolean;
}, {}>;

export declare const DataListGroup: DefineComponent<{
    items: {
        type: PropType<DataListGroupItems>;
        required: true;
    };
    icons: {
        type: PropType<DataListIcons_2 | undefined>;
        default: undefined;
    };
    itemWidth: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderHtmlValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, unknown, {}, {
    emitItemAction(dataListIndex: number, itemIndex: number): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, "click:list-item"[], "click:list-item", PublicProps, Readonly<ExtractPropTypes<{
    items: {
        type: PropType<DataListGroupItems>;
        required: true;
    };
    icons: {
        type: PropType<DataListIcons_2 | undefined>;
        default: undefined;
    };
    itemWidth: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderHtmlValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onClick:list-item"?: ((...args: any[]) => any) | undefined;
}, {
    loading: boolean;
    icons: DataListIcons_2 | undefined;
    renderHtmlValue: boolean;
    itemWidth: string;
}, {}>;

export declare const DatePicker: DefineComponent<{
    birthdate: {
        type: PropType<boolean>;
        default: boolean;
    };
    appendIcon: {
        type: PropType<boolean>;
        default: boolean;
    };
    noCalendar: {
        type: PropType<boolean>;
        default: boolean;
    };
    noPrependIcon: {
        type: PropType<boolean>;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    showWeekends: {
        type: PropType<boolean>;
        default: boolean;
    };
    outlined: {
        type: PropType<boolean>;
        default: boolean;
    };
    textFieldActivator: {
        type: PropType<boolean>;
        default: boolean;
    };
    clearable: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: PropType<string | number | boolean | any[] | Record<string, any> | null>;
        default: () => never[];
    };
    label: {
        type: PropType<string>;
        default: string;
    };
    range: {
        type: PropType<boolean>;
        default: boolean;
    };
    rules: {
        type: PropType<any[]>;
        default: () => never[];
    };
    textFieldClass: {
        type: PropType<string | string[]>;
        default: string;
    };
    hint: {
        type: PropType<string>;
        default: string;
    };
    dateFormat: {
        type: PropType<string>;
        default: string;
    };
    dateFormatReturn: {
        type: PropType<string>;
        default: string;
    };
}, unknown, DatePickerData, {
    indexedThis(): {
        [key: string]: any;
    };
    textFieldOptions(): {
        value: any;
        type: string;
        hideDetails: string;
        label: string;
        "aria-describedby": string;
        variant: string;
        disabled: boolean;
        hint: string;
        prependIcon: string | undefined;
        appendInnerIcon: string | undefined;
        persistentHint: boolean;
        color: string;
        rules: any[];
        class: (string | {
            'warning-style': boolean;
        })[];
        errorMessages: {};
    };
    hasError(): any;
    textFieldClasses(): string[];
    getVariant(): "outlined" | "underlined";
    prependIconValue(): string | undefined;
}, {
    emitUpdateEvent(): void;
    isWeekend(date: any): boolean;
    handleIconClickGeneric(event: any, datePickerRef: any): void;
    handleIconClick(event: any): void;
    rangeHandleIconClick(event: any): void;
    blockOpenOnclickGeneric(datePickerRef: any): void;
    blockOpenOnclick(): void;
    blockOpenOnclickRangePicker(): void;
    handleClose(): void;
    formatDate(date: any): any;
    createDateRegEx(format: string): RegExp;
    updateInputValue(value: {
        data: string | null;
    }, historyKey: string): void;
    getInput(value: any): void;
    stopInput(): void;
    validate(value: any): void;
    buildTextFieldClasses(): string[];
    determineVariant(): "outlined" | "underlined";
    onClear(): void;
    handleKeyDown(event: KeyboardEvent): void;
}, Customizable | DefineComponent<{
    warningRules: {
        type: PropType<ValidationRule[]>;
        default: () => never[];
    };
}, unknown, {
    messages: string[];
}, {}, {
    validate(date: string): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    warningRules: {
        type: PropType<ValidationRule[]>;
        default: () => never[];
    };
}>>, {
    warningRules: ValidationRule[];
}, {}> | DefineComponent<{
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, unknown, {
    internalErrorProp: {
        get(): boolean;
        set(value: unknown): void;
    };
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    error: boolean;
}, {}>, ComponentOptionsMixin, ("input" | "change" | "update:model-value" | "update:endDate" | "update:startDate")[], "input" | "change" | "update:model-value" | "update:endDate" | "update:startDate", PublicProps, Readonly<ExtractPropTypes<{
    birthdate: {
        type: PropType<boolean>;
        default: boolean;
    };
    appendIcon: {
        type: PropType<boolean>;
        default: boolean;
    };
    noCalendar: {
        type: PropType<boolean>;
        default: boolean;
    };
    noPrependIcon: {
        type: PropType<boolean>;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    showWeekends: {
        type: PropType<boolean>;
        default: boolean;
    };
    outlined: {
        type: PropType<boolean>;
        default: boolean;
    };
    textFieldActivator: {
        type: PropType<boolean>;
        default: boolean;
    };
    clearable: {
        type: PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: PropType<string | number | boolean | any[] | Record<string, any> | null>;
        default: () => never[];
    };
    label: {
        type: PropType<string>;
        default: string;
    };
    range: {
        type: PropType<boolean>;
        default: boolean;
    };
    rules: {
        type: PropType<any[]>;
        default: () => never[];
    };
    textFieldClass: {
        type: PropType<string | string[]>;
        default: string;
    };
    hint: {
        type: PropType<string>;
        default: string;
    };
    dateFormat: {
        type: PropType<string>;
        default: string;
    };
    dateFormatReturn: {
        type: PropType<string>;
        default: string;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    "onUpdate:model-value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endDate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startDate"?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    disabled: boolean;
    appendIcon: boolean;
    outlined: boolean;
    modelValue: string | number | boolean | any[] | Record<string, any> | null;
    range: boolean;
    clearable: boolean;
    birthdate: boolean;
    noCalendar: boolean;
    noPrependIcon: boolean;
    showWeekends: boolean;
    textFieldActivator: boolean;
    rules: any[];
    textFieldClass: string | string[];
    hint: string;
    dateFormat: string;
    dateFormatReturn: string;
}, {}>;

declare interface DatePickerData {
    date: Date | null | any[] | string;
    dateRangeTemp: any[];
    format: string;
    inputValue: string;
    calendarIcon: string;
    errorMessages: string[] | any;
    birthdateFlow: DatePickerFlow;
    isCalOpen: boolean;
    lastTypeAddedDate: string;
    dayNames: string[];
}

declare type DatePickerFlow = ("calendar" | "month" | "year" | "time" | "minutes" | "hours" | "seconds")[];

/** Deep copy an object or an array without reference */
export declare function deepCopy<T = any>(o: UnknownValue): T;

/** Deep remove a list of keys in an object or an array */
export declare function deepRemoveKeys<T = any>(collection: UnknownValue_2, keys: string | string[]): T;

export declare const DialogBox: DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: undefined;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    cancelBtnText: {
        type: StringConstructor;
        default: string;
    };
    confirmBtnText: {
        type: StringConstructor;
        default: string;
    };
    hideActions: {
        type: BooleanConstructor;
        default: boolean;
    };
    persistent: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    $refs: any;
    closeIcon: string;
    locales: {
        closeBtn: string;
        cancelBtn: string;
        confirmBtn: string;
    };
    dialog: boolean;
}, {}, {
    getSelectableElements(): Promise<HTMLElement[]>;
    setEventListeners(): Promise<void>;
}, Customizable, ComponentOptionsMixin, ("update:modelValue" | "cancel" | "confirm")[], "update:modelValue" | "cancel" | "confirm", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: undefined;
    };
    width: {
        type: StringConstructor;
        default: string;
    };
    cancelBtnText: {
        type: StringConstructor;
        default: string;
    };
    confirmBtnText: {
        type: StringConstructor;
        default: string;
    };
    hideActions: {
        type: BooleanConstructor;
        default: boolean;
    };
    persistent: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    width: string;
    modelValue: boolean;
    persistent: boolean;
    cancelBtnText: string;
    confirmBtnText: string;
    hideActions: boolean;
}, {}>;

export declare const DownloadBtn: DefineComponent<{
    filePromise: {
        type: PropType<() => Promise<AxiosResponse<Blob>>>;
        required: true;
    };
    fallbackFilename: {
        type: StringConstructor;
        default: undefined;
    };
    notification: {
        type: (BooleanConstructor | StringConstructor)[];
        default: string;
    };
}, unknown, {
    locales: {
        downloadSuccess: string;
    };
    StateEnum: typeof StateEnum;
    downloadIcon: string;
    state: StateEnum;
}, {
    btnOptions(): Options;
}, {
    getTimestampFilename(): string;
    getFileInfo(headers: IndexedObject): FileInfo;
    notifyUser(): void;
    download(): Promise<void>;
    addNotification: ActionMethod;
}, Customizable, ComponentOptionsMixin, "error"[], "error", PublicProps, Readonly<ExtractPropTypes<{
    filePromise: {
        type: PropType<() => Promise<AxiosResponse<Blob>>>;
        required: true;
    };
    fallbackFilename: {
        type: StringConstructor;
        default: undefined;
    };
    notification: {
        type: (BooleanConstructor | StringConstructor)[];
        default: string;
    };
}>> & {
    onError?: ((...args: any[]) => any) | undefined;
}, {
    notification: string | boolean;
    fallbackFilename: string;
}, {}>;

/** Download a file */
export declare function downloadFile(content: BufferSource_2 | Blob | string, filename: string, type: string, utf8Bom?: boolean): void;

export declare const email: ValidationRule_2;

/** From https://emailregex.com/ */
export declare const EMAIL_REGEXP: RegExp;

/** Check that the value is a valid email */
export declare function emailFn(errorMessages?: ErrorMessages): ValidationRule_2;

export declare const ErrorPage: DefineComponent<{
    pageTitle: {
        type: StringConstructor;
        default: undefined;
    };
    message: {
        type: StringConstructor;
        default: undefined;
    };
    code: {
        type: StringConstructor;
        default: undefined;
    };
    btnText: {
        type: StringConstructor;
        default: string;
    };
    btnRoute: {
        type: PropType<string | RouteRecordRaw>;
        default: () => {
            name: string;
        };
    };
    btnHref: {
        type: StringConstructor;
        default: undefined;
    };
    noBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    codeErrorText: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {
    locales: {
        errorCodeText: string;
        supportIdMessage: string;
        btnText: string;
    };
    route: string | RouteRecordRaw | undefined;
}, {
    mobileVersion(): boolean;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    pageTitle: {
        type: StringConstructor;
        default: undefined;
    };
    message: {
        type: StringConstructor;
        default: undefined;
    };
    code: {
        type: StringConstructor;
        default: undefined;
    };
    btnText: {
        type: StringConstructor;
        default: string;
    };
    btnRoute: {
        type: PropType<string | RouteRecordRaw>;
        default: () => {
            name: string;
        };
    };
    btnHref: {
        type: StringConstructor;
        default: undefined;
    };
    noBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    codeErrorText: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    code: string;
    message: string;
    btnText: string;
    pageTitle: string;
    btnRoute: string | RouteRecordRaw;
    btnHref: string;
    noBtn: boolean;
    codeErrorText: string;
}, {}>;

export declare const exactLength: typeof exactLengthFn;

/** Check that the value does not exceeds the specified length */
export declare function exactLengthFn(lengthValue: number, ignoreSpaces?: boolean, errorMessages?: ErrorMessages<number>): ValidationRule_2;

export declare const ExternalLinks: DefineComponent<{
    position: {
        type: StringConstructor;
        required: true;
        validator: (value: string) => boolean;
    };
    items: {
        type: PropType<ExternalLink[]>;
        default: () => never[];
    };
    btnText: {
        type: StringConstructor;
        default: string;
    };
    nudgeTop: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    nudgeBottom: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    fixed: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    locales: {
        noData: string;
        btnText: string;
    };
    hover: boolean;
    menu: boolean;
    linkIcon: string;
}, {
    computedPosition(): Position;
    right(): boolean;
    left(): boolean;
    top(): boolean;
    bottom(): boolean;
    open(): boolean;
    btnTextSpacing(): string;
    transform(): string;
    computedNudgeTop(): string;
    computedNudgeBottom(): string;
    btnStyle(): IndexedObject;
    arrowIcon(): string;
}, {}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    position: {
        type: StringConstructor;
        required: true;
        validator: (value: string) => boolean;
    };
    items: {
        type: PropType<ExternalLink[]>;
        default: () => never[];
    };
    btnText: {
        type: StringConstructor;
        default: string;
    };
    nudgeTop: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    nudgeBottom: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    fixed: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    fixed: boolean;
    items: ExternalLink[];
    nudgeBottom: string | number;
    btnText: string;
    nudgeTop: string | number;
}, {}>;

declare const FileList_2: DefineComponent<{
    files: {
        type: PropType<FileItem[]>;
        required: true;
    };
    hideUploadBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    showViewBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    alwaysShowDeleteBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideDeleteBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLastDivider: {
        type: BooleanConstructor;
        default: boolean;
    };
    optionalFileText: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {
    locales: {
        optional: string;
        uploadFile: string;
        viewFile: string;
    };
    FileStateEnum: typeof FileStateEnum;
    refreshIcon: string;
    eyeIcon: string;
    deleteIcon: string;
    uploadIcon: string;
}, {
    iconColor(): "grey" | "grey-lighten-40";
}, {
    isFileItem(file: FileItem | File): file is FileItem;
    shouldDisplayDeleteBtn(file: FileItem | File): boolean;
    getIconInfo(file: FileItem | File): IconInfo;
    getItemColor(state: string): string | undefined;
    showDivider(index: number): boolean;
}, Customizable | DefineComponent<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}, unknown, unknown, {
    widthStyles(): IndexedObject<string | undefined>;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}>>, {
    maxWidth: string | number | undefined;
    minWidth: string | number | undefined;
    width: string | number | undefined;
}, {}>, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    files: {
        type: PropType<FileItem[]>;
        required: true;
    };
    hideUploadBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    showViewBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    alwaysShowDeleteBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideDeleteBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLastDivider: {
        type: BooleanConstructor;
        default: boolean;
    };
    optionalFileText: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    hideUploadBtn: boolean;
    showViewBtn: boolean;
    alwaysShowDeleteBtn: boolean;
    hideDeleteBtn: boolean;
    hideLastDivider: boolean;
    optionalFileText: string;
}, {}>;
export { FileList_2 as FileList }

export declare const FilePreview: DefineComponent<{
    file: {
        type: PropType<Blob | File | null>;
        default: null;
        /** @see https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VFileInput/VFileInput.ts#L71 */
        validator(value: unknown): boolean;
    };
    options: {
        type: PropType<Options>;
        default: () => {};
    };
}, unknown, {
    locales: {
        previewNotAvailable: string;
        previewTypeNotAvailable: string;
    };
    fileURL: string;
}, {
    filePreviewOptions(): Options;
    isPdf(): boolean;
    isImage(): boolean;
}, {
    getFileURL(): void;
    revokeFileURL(): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    file: {
        type: PropType<Blob | File | null>;
        default: null;
        /** @see https://github.com/vuetifyjs/vuetify/blob/master/packages/vuetify/src/components/VFileInput/VFileInput.ts#L71 */
        validator(value: unknown): boolean;
    };
    options: {
        type: PropType<Options>;
        default: () => {};
    };
}>>, {
    options: Options;
    file: Blob | File | null;
}, {}>;

declare enum FileStateEnum {
    INITIAL = "initial",
    SUCCESS = "success",
    ERROR = "error"
}

export declare const FileUpload: DefineComponent<{
    modelValue: {
        type: PropType<File | File[] | null>;
        default: null;
        /** @see https://github.com/vuetifyjs/vuetify/blob/9e4daa81bfe3046fcf7e4a731809c3d554b3df54/packages/vuetify/src/components/VFileInput/VFileInput.tsx#L72C13-L72C13 */
        validator(val: unknown): boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    noRipple: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    locales: {
        or: string;
        chooseFile: string;
        infoText: (max: string, ext: string, length: number) => string;
        fileSizeUnits: string[];
    };
    uploadIcon: string;
}, {
    colors(): IndexedObject;
    maxSizeReadable(): string;
    extensions(): string;
}, {
    retry(): void;
}, Customizable | DefineComponent<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}, unknown, unknown, {
    widthStyles(): IndexedObject<string | undefined>;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}>>, {
    maxWidth: string | number | undefined;
    minWidth: string | number | undefined;
    width: string | number | undefined;
}, {}> | DefineComponent<{}, {}, {
    $refs: any;
    dragover: boolean;
}, {}, {
    inputValueChanged(event: HTMLInputEvent): void;
    emitChangeEvent(): void;
    dropHandler(e: DragEvent): void;
    selfReset(): void;
}, DefineComponent<{
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    fileSizeMax: {
        type: NumberConstructor;
        default: number;
    };
    fileSizeUnits: {
        type: PropType<string[]>;
        default: () => string[];
    };
    allowedExtensions: {
        type: PropType<string[]>;
        default: () => string[];
    };
    accept: {
        type: StringConstructor;
        default: undefined;
    };
}, unknown, {
    files: File[];
    error: boolean;
}, {
    computedAccept(): string;
}, {
    validateFile(file: File): boolean;
    ifTooManyFiles(files: FileList | DataTransferItemList): boolean;
}, ComponentOptionsMixin, ComponentOptionsMixin, "error"[], "error", PublicProps, Readonly<ExtractPropTypes<{
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    fileSizeMax: {
        type: NumberConstructor;
        default: number;
    };
    fileSizeUnits: {
        type: PropType<string[]>;
        default: () => string[];
    };
    allowedExtensions: {
        type: PropType<string[]>;
        default: () => string[];
    };
    accept: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    onError?: ((...args: any[]) => any) | undefined;
}, {
    multiple: boolean;
    accept: string;
    fileSizeMax: number;
    fileSizeUnits: string[];
    allowedExtensions: string[];
}, {}>, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, {}>, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: PropType<File | File[] | null>;
        default: null;
        /** @see https://github.com/vuetifyjs/vuetify/blob/9e4daa81bfe3046fcf7e4a731809c3d554b3df54/packages/vuetify/src/components/VFileInput/VFileInput.tsx#L72C13-L72C13 */
        validator(val: unknown): boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    noRipple: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    modelValue: File | File[] | null;
    multiple: boolean;
    noRipple: boolean;
}, {}>;

declare interface FilterItem {
    name: string;
    value?: unknown;
    formatChip?: (value: any) => ChipItem_2[];
    chipOverflowLimit?: number;
    title?: string;
    [key: string]: unknown;
}

export declare const FiltersInline: DefineComponent<{}, {}, {
    locales: {
        badgeLabel: (count: number) => string;
    };
    downIcon: string;
}, {}, {}, DefineComponent<{
    modelValue: {
        type: PropType<FilterItem[]>;
        default: () => never[];
    };
}, unknown, {
    filters: FilterItem[];
}, {}, {
    getFilterCount(filter: FilterItem): number;
    formatFilterName(name: string): string;
    getChips({ value, formatChip }: FilterItem): ChipItem_2[];
    removeChip(filter: FilterItem, chip: ChipItem_2): void;
    resetFilter(filter: FilterItem): void;
    resetAllFilters(): void;
    updateValue(): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: PropType<FilterItem[]>;
        default: () => never[];
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: FilterItem[];
}, {}>, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{}>>, {}, {}>;

export declare const FiltersSideBar: DefineComponent<{
    modelValue: {
        type: PropType<FilterItem[]>;
        default: () => never[];
    };
}, unknown, {
    drawer: boolean;
    locales: {
        filterBtnLabel: string;
        badgeLabel: (count: number) => string;
        reset: string;
        close: string;
        apply: string;
    };
    filterIcon: string;
}, {
    activeFiltersCount(): number;
}, {
    toggleDrawer(): void;
    applyFilters(): void;
}, DefineComponent<{
    modelValue: {
        type: PropType<FilterItem[]>;
        default: () => never[];
    };
}, unknown, {
    filters: FilterItem[];
}, {}, {
    getFilterCount(filter: FilterItem): number;
    formatFilterName(name: string): string;
    getChips({ value, formatChip }: FilterItem): ChipItem_2[];
    removeChip(filter: FilterItem, chip: ChipItem_2): void;
    resetFilter(filter: FilterItem): void;
    resetAllFilters(): void;
    updateValue(): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: PropType<FilterItem[]>;
        default: () => never[];
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: FilterItem[];
}, {}>, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: PropType<FilterItem[]>;
        default: () => never[];
    };
}>>, {
    modelValue: FilterItem[];
}, {}>;

export declare const FooterBar: DefineComponent<{
    a11yCompliance: {
        type: PropType<A11yComplianceEnum>;
        default: A11yComplianceEnum;
        validator: (value: A11yComplianceEnum) => boolean;
    };
    linkItems: {
        type: PropType<LinkItem[]>;
        default: null;
    };
    sitemapRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    cguRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    cookiesRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    legalNoticeRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    a11yStatementRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    hideSitemapLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideCguLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideCookiesLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLegalNoticeLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideA11yLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    version: {
        type: StringConstructor;
        default: undefined;
    };
    hideLogo: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSocialMediaLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    socialMediaLinks: {
        type: PropType<SocialMediaLink[]>;
        default: () => SocialMediaLink[];
    };
}, unknown, {
    locales: {
        goTopBtnLabel: string;
        sitemapLabel: string;
        cguLabel: string;
        cookiesLabel: string;
        legalNoticeLabel: string;
        versionLabel: string;
        followUs: string;
        "non-compliant": string;
        "partially-compliant": string;
        "fully-compliant": string;
        a11yLabel: (complianceLabel: string) => string;
    };
    arrowTopIcon: string;
}, {
    a11yComplianceLabel(): string;
    extendedMode(): boolean;
    logoSize(): LogoSizeEnum;
    footerLinksMapping(): LinkItem[];
}, {
    getLinkComponent(item: LinkItem): string;
    scrollToTop(): void;
}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    a11yCompliance: {
        type: PropType<A11yComplianceEnum>;
        default: A11yComplianceEnum;
        validator: (value: A11yComplianceEnum) => boolean;
    };
    linkItems: {
        type: PropType<LinkItem[]>;
        default: null;
    };
    sitemapRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    cguRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    cookiesRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    legalNoticeRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    a11yStatementRoute: {
        type: PropType<RouteLocationRaw>;
        default: () => {
            name: string;
        };
    };
    hideSitemapLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideCguLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideCookiesLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLegalNoticeLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideA11yLink: {
        type: BooleanConstructor;
        default: boolean;
    };
    version: {
        type: StringConstructor;
        default: undefined;
    };
    hideLogo: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSocialMediaLinks: {
        type: BooleanConstructor;
        default: boolean;
    };
    socialMediaLinks: {
        type: PropType<SocialMediaLink[]>;
        default: () => SocialMediaLink[];
    };
}>>, {
    version: string;
    a11yCompliance: A11yComplianceEnum;
    linkItems: LinkItem[];
    sitemapRoute: RouteLocationRaw;
    cguRoute: RouteLocationRaw;
    cookiesRoute: RouteLocationRaw;
    legalNoticeRoute: RouteLocationRaw;
    a11yStatementRoute: RouteLocationRaw;
    hideSitemapLink: boolean;
    hideCguLink: boolean;
    hideCookiesLink: boolean;
    hideLegalNoticeLink: boolean;
    hideA11yLink: boolean;
    hideLogo: boolean;
    hideSocialMediaLinks: boolean;
    socialMediaLinks: SocialMediaLink[];
}, {}>;

export declare const FooterBtn: DefineComponent<{
    inert: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, unknown, {
    tag(): string;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    inert: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    inert: boolean;
}, {}>;

export declare const FooterWrapper: DefineComponent<{}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{}>>, {}, {}>;

/** Format a date with dayjs */
export declare function formatDate(date: Dayjs, format?: string): string;

/** Format a NIR (with or without key) */
export declare function formatNir(nir: string): string;

export declare const FranceConnectBtn: DefineComponent<{
    href: {
        type: StringConstructor;
        required: true;
    };
    connectPlus: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    locales: {
        btnLabel: (connectPlus: boolean) => string;
        infoLinkLabel: (connectPlus: boolean) => string;
    };
    linkIcon: string;
}, {
    btnWidth(): string;
    btnViewBox(): string;
    infoLinkUrl(): string;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    href: {
        type: StringConstructor;
        required: true;
    };
    connectPlus: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    connectPlus: boolean;
}, {}>;

/** Get the extension of a file */
export declare function getFileExtension(filename: string): string;

export declare const getters: GetterTree<NotificationState, RootState>;

export declare const HeaderBar: DefineComponent<{
    theme: {
        type: any;
        default: ThemeEnum;
        validator: (value: any) => boolean;
    };
    serviceTitle: {
        type: StringConstructor;
        default: undefined;
    };
    serviceSubTitle: {
        type: StringConstructor;
        default: undefined;
    };
    navigationItems: {
        type: PropType<NavigationItem[]>;
        default: undefined;
    };
    innerWidth: {
        type: StringConstructor;
        default: string;
    };
    homeLink: {
        type: PropType<any>;
        default: undefined;
    };
    homeHref: {
        type: StringConstructor;
        default: undefined;
    };
    homeArialabel: {
        type: StringConstructor;
        default: undefined;
    };
    showNavBarMenuBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
    miniVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
    sticky: {
        type: BooleanConstructor;
        default: boolean;
    };
    showStickyNavBar: {
        type: BooleanConstructor;
        default: boolean;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}, unknown, {
    drawer: boolean;
    tab: number;
    scrolled: boolean;
    appBarRef: Ref<HTMLElement | null>;
    hideScrollbar: boolean;
}, {
    isMobileVersion(): boolean;
    isMiniVersion(): boolean;
    targetSelector(): string | null;
    spacingClass(): string;
    contentSheetHeight(): number;
    fullHeight(): number;
    height(): number;
    mainContentMargin(): string;
    hasNavigationItems(): boolean;
    showHeaderMenuBtn(): boolean;
    showNavigationBar(): boolean;
    showSpacer(): boolean;
}, {
    updateDrawer(value: boolean): void;
    onScroll(event: MouseEvent): void;
}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    theme: {
        type: any;
        default: ThemeEnum;
        validator: (value: any) => boolean;
    };
    serviceTitle: {
        type: StringConstructor;
        default: undefined;
    };
    serviceSubTitle: {
        type: StringConstructor;
        default: undefined;
    };
    navigationItems: {
        type: PropType<NavigationItem[]>;
        default: undefined;
    };
    innerWidth: {
        type: StringConstructor;
        default: string;
    };
    homeLink: {
        type: PropType<any>;
        default: undefined;
    };
    homeHref: {
        type: StringConstructor;
        default: undefined;
    };
    homeArialabel: {
        type: StringConstructor;
        default: undefined;
    };
    showNavBarMenuBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
    miniVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
    sticky: {
        type: BooleanConstructor;
        default: boolean;
    };
    showStickyNavBar: {
        type: BooleanConstructor;
        default: boolean;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    theme: any;
    sticky: boolean;
    target: string;
    serviceTitle: string;
    serviceSubTitle: string;
    mobileVersion: boolean;
    homeLink: any;
    homeHref: string;
    homeArialabel: string;
    innerWidth: string;
    navigationItems: NavigationItem[];
    showNavBarMenuBtn: boolean;
    miniVersion: boolean;
    showStickyNavBar: boolean;
}, {}>;

export declare const HeaderLoading: DefineComponent<{
    width: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
}, unknown, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    width: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    height: string;
    width: string;
}, {}>;

/**
 * Insert string at a specific position
 * If the position doesn't exists, the replacement
 * will be inserted at the end or the start
 */
export declare function insertAt(source: string, index: number, replacement: string): string;

export declare type Interval = '()' | '[]' | '[)' | '(]';

/** Check if a date is after another date (DD/MM/YYYY format) */
export declare function isDateAfter(maxDate: string, value: string): boolean;

/** Check if a date is before another date (DD/MM/YYYY format) */
export declare function isDateBefore(minDate: string, value: string): boolean;

/** Check if a date is in a range */
export declare function isDateInRange(date: string, startDate: string, endDate: string, interval?: Interval): boolean;

export declare const isDateValid: ValidationRule_2;

/** Check that the value is a valid date (DD/MM/YYYY format) */
export declare function isDateValidFn(errorMessages?: ErrorMessages): ValidationRule_2;

/** Check if an email is valid */
export declare function isEmailValid(email: string): boolean;

/** Check if a date is Saturday or Sunday */
export declare function isWeekend(date: string): boolean;

export declare const LangBtn: DefineComponent<{
    availableLanguages: {
        type: PropType<string[] | "*">;
        default: () => string[];
        validator: (value: string[] | AllLanguagesChar) => boolean;
    };
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    hideDownArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {
    downArrowIcon: string;
}, {
    currentLangClass(): string | undefined;
    languages(): Languages;
    currentLangData(): CurrentLangData;
}, {
    getFormattedLanguages(): Languages;
    updateLang(lang: string): void;
}, Customizable, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    availableLanguages: {
        type: PropType<string[] | "*">;
        default: () => string[];
        validator: (value: string[] | AllLanguagesChar) => boolean;
    };
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    hideDownArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    modelValue: string;
    availableLanguages: string[] | "*";
    hideDownArrow: boolean;
}, {}>;

/** @see https://developer.mozilla.org/en-US/docs/Web/API/Storage for native specifications */
export declare class LocalStorageUtility {
    readonly localStorageSupported: boolean;
    /** Integer number */
    readonly version?: number;
    /** Passive expiration time in ms */
    readonly expiration?: number;
    readonly prefix: string;
    private CONTROL_ITEM_KEY;
    constructor(version?: number, expiration?: number, prefix?: string);
    get length(): number;
    key(n: number): string;
    getItem<T = any>(key: string): T | null;
    setItem<T>(key: string, value: T): void;
    removeItem(key: string): void;
    clear(): void;
    getAll(): any[];
    private getAllKeys;
    private filterStorage;
    /** Wrapper for localStorage.getItem that parses the result */
    private get;
    /** Wrapper for localStorage.setItem that stringify the value */
    private set;
    private checkIfExpired;
    private getControlItem;
    private setControlItem;
    private checkIfOldVersion;
}

export declare const Logo: DefineComponent<{
    hideSignature: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOrganism: {
        type: BooleanConstructor;
        default: boolean;
    };
    risquePro: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    avatar: {
        type: BooleanConstructor;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: LogoSizeEnum;
        validator: (value: string) => boolean;
    };
}, unknown, {
    locales: {
        organism: string;
        assuranceMaladie: string;
        signature: string;
        risquePro: string;
    };
    risqueProColor: string;
}, {
    fillColor(): string;
    dimensions(): Dimensions;
    viewBox(): string;
    label(): string;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    hideSignature: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideOrganism: {
        type: BooleanConstructor;
        default: boolean;
    };
    risquePro: {
        type: BooleanConstructor;
        default: boolean;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    avatar: {
        type: BooleanConstructor;
        default: boolean;
    };
    dark: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: LogoSizeEnum;
        validator: (value: string) => boolean;
    };
}>>, {
    size: string;
    risquePro: boolean;
    hideSignature: boolean;
    hideOrganism: boolean;
    ariaLabel: string;
    avatar: boolean;
    dark: boolean;
}, {}>;

export declare const LogoBrandSection: DefineComponent<{
    theme: {
        type: PropType<ThemeEnum>;
        default: ThemeEnum;
    };
    serviceTitle: {
        type: StringConstructor;
        default: undefined;
    };
    serviceSubTitle: {
        type: StringConstructor;
        default: undefined;
    };
    mobileVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
    reduceLogo: {
        type: BooleanConstructor;
        default: boolean;
    };
    homeLink: {
        type: PropType<any>;
        default: string;
    };
    homeHref: {
        type: StringConstructor;
        default: undefined;
    };
    homeArialabel: {
        type: StringConstructor;
        default: undefined;
    };
}, unknown, {
    locales: {
        homeLinkPrefix: string;
        logoCnam: string;
        logoAmeli: string;
        logoAmeliPro: string;
        logoCompteAmeli: string;
        compteEntreprise: {
            title: {
                text: string;
                highlight: string;
            };
            subTitle: string;
        };
    };
}, {
    service(): Service;
    mobileWithSecondaryLogo(): boolean;
    height(): string;
    isRisquePro(): boolean;
    isCompteEntreprise(): boolean;
    isCompteAmeliMobile(): boolean;
    hideSignature(): boolean;
    secondaryLogo(): LogoInfo | undefined;
    hasSecondaryLogo(): boolean;
    hasSecondaryLogoLink(): boolean;
    isNuxt(): boolean;
    logoContainerComponent(): string;
    secondaryLogoCtnComponent(): string;
    secondaryLogoLabel(): string | null;
    avatar(): boolean;
    hasBrandSlot(): boolean;
    showBrandContent(): boolean;
    showDivider(): boolean;
    showServiceSubTitle(): boolean;
    dividerColor(): string;
    dividerDimensions(): Dimensions;
    logoSize(): LogoSizeEnum;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    theme: {
        type: PropType<ThemeEnum>;
        default: ThemeEnum;
    };
    serviceTitle: {
        type: StringConstructor;
        default: undefined;
    };
    serviceSubTitle: {
        type: StringConstructor;
        default: undefined;
    };
    mobileVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
    reduceLogo: {
        type: BooleanConstructor;
        default: boolean;
    };
    homeLink: {
        type: PropType<any>;
        default: string;
    };
    homeHref: {
        type: StringConstructor;
        default: undefined;
    };
    homeArialabel: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    theme: ThemeEnum;
    serviceTitle: string;
    serviceSubTitle: string;
    mobileVersion: boolean;
    reduceLogo: boolean;
    homeLink: any;
    homeHref: string;
    homeArialabel: string;
}, {}>;

declare enum LogoSizeEnum {
    X_SMALL = "x-small",
    SMALL = "small",
    NORMAL = "normal"
}

export declare const MaintenancePage: DefineComponent<{}, {}, {
    locales: {
        pageTitle: string;
        message: string;
    };
}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{}>>, {}, {}>;

export declare const matchPattern: typeof matchPatternFn;

/** Check that the value match the specified pattern */
export declare function matchPatternFn(pattern: RegExp, errorMessages?: ErrorMessages<number>): ValidationRule_2;

export declare const maxLength: typeof maxLengthFn;

/** Check that the value does not exceeds the specified length */
export declare function maxLengthFn(max: number, ignoreSpaces?: boolean, errorMessages?: ErrorMessages<number>): ValidationRule_2;

export declare const minLength: typeof minLengthFn;

/** Check that the value is not shorter than the specified length */
export declare function minLengthFn(min: number, ignoreSpaces?: boolean, errorMessages?: ErrorMessages<number>): ValidationRule_2;

export declare const mutations: MutationTree<NotificationState>;

export declare const NirField: DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: null;
    };
    nirLength: {
        type: NumberConstructor;
        default: number;
        validator(value: number): boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltip: {
        type: StringConstructor;
        default: undefined;
    };
}, unknown, {
    $refs: any;
    locales: {
        readonly numberLabel: "Numéro de sécurité sociale";
        readonly numberHint: "13 caractères";
        readonly keyLabel: "Clé";
        readonly keyHint: "2 chiffres";
        readonly errorRequiredNumber: "Le numéro de sécurité sociale est obligatoire";
        readonly errorRequiredKey: "La clé de validation est obligatoire";
        readonly errorLengthNumber: (length: number) => string;
        readonly errorLengthKey: (length: number) => string;
    };
    infoIcon: string;
    maskaNumberValue: {
        masked: string;
        unmasked: string;
        completed: boolean;
    };
    numberValue: string;
    keyValue: string;
    numberMask: {
        mask: string;
        preProcess: (value: string) => string;
        tokens: {
            C: {
                pattern: RegExp;
                transform: (char: string) => string;
            };
        };
    };
    keyMask: {
        mask: string;
    };
    numberErrors: string[];
    keyErrors: string[];
    isSingleField: boolean;
    isInputFocused: boolean;
}, {
    numberFilled(): boolean;
    keyFilled(): boolean;
    /**
     * Generate the validation rules for the number field
     */
    numberRules(): ValidationRule[];
    /**
     * Generate the validation rules for the key field
     */
    keyRules(): ValidationRule[];
    textFieldOptions(): {
        [x: string]: any;
    };
    errors(): string | never[];
    internalValue(): string | null;
}, {
    changeNumberValue(): void;
    changeKeyValue(): void;
    /**
     * Execute the validation rules for the number field
     */
    validateNumberValue(): void;
    /**
     * Execute the validation rules for the key field
     */
    validateKeyValue(): void;
    focusKeyField({ key, altKey, ctrlKey, metaKey, shiftKey, }: KeyboardEvent): void;
    focusNumberField(): void;
}, Customizable, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: null;
    };
    nirLength: {
        type: NumberConstructor;
        default: number;
        validator(value: number): boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    tooltip: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    outlined: boolean;
    required: boolean;
    modelValue: string;
    tooltip: string;
    nirLength: number;
}, {}>;

export declare const notAfterToday: ValidationRule_2;

/** Check that the value is not after today (DD/MM/YYYY format) */
export declare function notAfterTodayFn(errorMessages?: ErrorMessages): ValidationRule_2;

export declare const notBeforeToday: ValidationRule_2;

/** Check that the value is not before today (DD/MM/YYYY format) */
export declare function notBeforeTodayFn(errorMessages?: ErrorMessages): ValidationRule_2;

export declare const NotFoundPage: DefineComponent<{}, {}, {
    locales: {
        code: string;
        pageTitle: string;
        message: string;
        supportIdMessage: string;
    };
}, {
    /**
     * Support ID is a number added by our firewall if a rule is violated
     * This should be displayed to the user so it can be used to track down the error
     */
    supportId(): string | null;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{}>>, {}, {}>;

export declare const notification: Module<NotificationState, RootState>;

export declare const NotificationBar: DefineComponent<{
    closeBtnText: {
        type: StringConstructor;
        default: string;
    };
    bottom: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    closeIcon: string;
    snackbarColor: string;
    snackbar: boolean;
    iconMapping: IndexedObject<string>;
}, {
    icon(): string | null;
    isDarkText(): boolean;
    contentColor(): string;
    dividerColor(): string;
    mobileVersion(): boolean;
    isLongText(): boolean;
    hasLongContent(): boolean;
    smallCloseBtn(): boolean;
    actionSlotAttrs(): Record<string, string | boolean>;
    notification: Computed;
}, {
    clearNotification(): void;
    dispatchClearNotification: ActionMethod;
}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    closeBtnText: {
        type: StringConstructor;
        default: string;
    };
    bottom: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    bottom: boolean;
    closeBtnText: string;
}, {}>;

declare type NumberOrNumberString = PropType<string | number | undefined>;

export declare const PageContainer: DefineComponent<{
    size: {
        type: StringConstructor;
        default: SizeEnum;
        validator: (value: string) => boolean;
    };
    spacing: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, unknown, {
    props: {
        size: string;
        spacing: string | undefined;
        color: string;
    };
}, {
    spacingClass(): string;
    containerSize(): number;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    size: {
        type: StringConstructor;
        default: SizeEnum;
        validator: (value: string) => boolean;
    };
    spacing: {
        type: StringConstructor;
        default: undefined;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    color: string;
    size: string;
    spacing: string;
}, {}>;

export declare const PaginatedTable: DefineComponent<{
    options: {
        type: PropType<Partial<DataOptions>>;
        required: true;
    };
    serverItemsLength: {
        type: NumberConstructor;
    };
    suffix: {
        type: StringConstructor;
        default: undefined;
    };
    itemsPerPage: {
        type: NumberConstructor;
    };
}, unknown, {
    localStorageUtility: LocalStorageUtility;
    localOptions: {};
    slotNames: "default"[];
}, {
    storageKey(): string;
    headers(): undefined | {
        title?: string;
        value: string;
    }[];
    optionsFacade(): {
        page: unknown;
        itemsPerPage: number | undefined;
        sortBy: {
            key: string;
            order: "desc" | "asc";
        }[];
        groupBy: {
            key: string;
            order: "desc" | "asc";
        }[];
        multiSort: boolean | undefined;
        mustSort: boolean | undefined;
    };
    propsFacade(): any;
}, {
    newLocalStorageInstance(): LocalStorageUtility;
    updateOptions(options: SortOption[] | GroupOption[]): void;
    createUpdatedOptions(options: any): DataOptions;
    createSortBy(options: any): string[];
    createSortDesc(options: any): boolean[];
    createGroupBy(options: any): string[];
    createGroupDesc(options: any): boolean[];
}, ComponentOptionsMixin, ComponentOptionsMixin, "update:options"[], "update:options", PublicProps, Readonly<ExtractPropTypes<{
    options: {
        type: PropType<Partial<DataOptions>>;
        required: true;
    };
    serverItemsLength: {
        type: NumberConstructor;
    };
    suffix: {
        type: StringConstructor;
        default: undefined;
    };
    itemsPerPage: {
        type: NumberConstructor;
    };
}>> & {
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
}, {
    suffix: string;
}, {}>;

/** Parse a date with dayjs */
export declare function parseDate(value: string, format?: string): dayjs.Dayjs;

export declare const PasswordField: DefineComponent<{
    modelValue: {
        type: () => string | null;
        default: null;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    eyeIcon: string;
    eyeOffIcon: string;
    showEyeIcon: boolean;
    error: boolean;
}, {
    btnLabel(): string;
    textFieldOptions(): Options;
    rules(): ValidationRule[];
}, {
    emitChangeEvent(value: string): void;
}, Customizable, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: () => string | null;
        default: null;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    outlined: boolean;
    required: boolean;
    modelValue: string | null;
}, {}>;

export declare const PeriodField: DefineComponent<{
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    noPrependIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    appendIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    dateFormat: {
        type: StringConstructor;
        default: string;
    };
    dateFormatReturn: {
        type: StringConstructor;
        default: string;
    };
}, unknown, PeriodFieldData, {
    formattedDateFormat(): string;
    formattedDateFormatReturn(): string;
    prependIconValue(): string | undefined;
    getVariant(): "outlined" | "underlined";
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, "change"[], "change", PublicProps, Readonly<ExtractPropTypes<{
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    noPrependIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    appendIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    dateFormat: {
        type: StringConstructor;
        default: string;
    };
    dateFormatReturn: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    disabled: boolean;
    appendIcon: boolean;
    outlined: boolean;
    noPrependIcon: boolean;
    hint: string;
    dateFormat: string;
    dateFormatReturn: string;
}, {}>;

declare interface PeriodFieldData {
    date: Date[] | null;
    calendarIcon: string;
}

export declare const PhoneField: DefineComponent<{
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    locales: {
        label: string;
    };
    phoneIcon: string;
    internalValue: string | null;
    counter: number;
    phonemask: {
        mask: string;
    };
}, {
    textFieldOptions(): Options;
    rules(): ValidationRule[];
    computedValue(): string | null;
}, {
    formatPhone(value: string): string;
    noSpacesCounter(value?: string | undefined): number;
    setInternalValue(event: any): void;
    emitChangeEvent(): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, ("update:modelValue" | "change")[], "update:modelValue" | "change", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: StringConstructor;
        default: undefined;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    outlined: boolean;
    required: boolean;
    modelValue: string;
}, {}>;

/** Validate a prop against a set of values */
export declare function propValidator(propName: string, acceptedValues: string[], value: string): boolean;

declare enum RangeEnum {
    MIN = 0,
    MAX = 1
}

export declare const RangeField: DefineComponent<{
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: () => number[] | null;
        default: null;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    locales: {
        minLabel: string;
        maxLabel: string;
    };
    rangeValue: number[];
}, {
    minValue(): number;
    maxValue(): number;
    mobileVersion(): boolean;
}, {
    updateMinValue(value: string): void;
    updateMaxValue(value: string): void;
    updateRange(index: RangeEnum, value: number): void;
    setRangeValue(index: RangeEnum, value: number): void;
    emitChangeEvent(): void;
}, Customizable, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    min: {
        type: NumberConstructor;
        default: number;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: () => number[] | null;
        default: null;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    max: number;
    min: number;
    outlined: boolean;
    modelValue: number[] | null;
}, {}>;

export declare const RatingPicker: DefineComponent<{
    type: {
        type: StringConstructor;
        required: true;
        validator: (value: string) => boolean;
    };
    label: {
        type: PropType<string | null>;
        default: null;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemLabels: {
        type: PropType<string[]>;
        default: null;
    };
    twoEmotions: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideAlert: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
}, unknown, {
    locales: {
        thanks: string;
    };
    AlertTypeEnum: typeof AlertTypeEnum;
    internalValue: number;
    displayAdditionalContent: boolean;
}, {
    ratingComponent(): string;
    length(): number | undefined;
    hasAnswered(): boolean;
}, {
    showAdditionalContent(value: number): void;
    setValue(value: number): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    type: {
        type: StringConstructor;
        required: true;
        validator: (value: string) => boolean;
    };
    label: {
        type: PropType<string | null>;
        default: null;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    itemLabels: {
        type: PropType<string[]>;
        default: null;
    };
    twoEmotions: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideAlert: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    label: string | null;
    modelValue: number;
    readonly: boolean;
    itemLabels: string[];
    twoEmotions: boolean;
    hideAlert: boolean;
}, {}>;

export declare const required: ValidationRule_2<Value>;

export declare function requiredFn(errorMessages?: ErrorMessages): ValidationRule_2<Value>;

/** Get the value of an error message */
export declare function ruleMessage<T>(errorMessages: ErrorMessages_2<T>, key: string, args?: T[]): string;

/** Get the scroll position for Vue Router (simulate browser behavior) */
export declare function scrollBehavior(to: RouteLocationNormalized, _from: RouteLocationNormalized, savedPosition?: {
    x: number;
    y: number;
}): {
    x: number;
    y: number;
} | {
    selector: string;
};

export declare const SearchListField: DefineComponent<{
    modelValue: {
        type: PropType<unknown[]>;
        default: () => never[];
    };
    items: {
        type: PropType<SearchListItem[]>;
        default: () => never[];
    };
}, unknown, {
    search: string | null;
    internalValue: unknown[];
    searchIcon: string;
    locales: {
        search: string;
        checkboxLabel: string;
    };
}, {
    filteredItems(): SearchListItem[];
}, {
    emitChangeEvent(value: unknown[]): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: PropType<unknown[]>;
        default: () => never[];
    };
    items: {
        type: PropType<SearchListItem[]>;
        default: () => never[];
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    items: SearchListItem[];
    modelValue: unknown[];
}, {}>;

export declare const SelectBtnField: DefineComponent<{
    modelValue: {
        type: PropType<SelectBtnValue>;
        default: null;
    };
    items: {
        type: PropType<SelectBtnItem[]>;
        default: () => never[];
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string[]>;
        default: undefined;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    checkIcon: string;
    internalValue: SelectBtnValue;
    darktheme: boolean;
}, {
    filteredItems(): SelectBtnItem[];
}, {
    isSelected(value: number | string): boolean;
    getIconStyles(item: SelectBtnItem): Record<string, string>;
    getNewValue(item: SelectBtnItem): SelectBtnValue;
    toggleItem(item: SelectBtnItem): void;
}, Customizable, ComponentOptionsMixin, ("update:modelValue" | "update:error" | "update:error-messages")[], "update:modelValue" | "update:error" | "update:error-messages", PublicProps, Readonly<ExtractPropTypes<{
    modelValue: {
        type: PropType<SelectBtnValue>;
        default: null;
    };
    items: {
        type: PropType<SelectBtnItem[]>;
        default: () => never[];
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    hint: {
        type: StringConstructor;
        default: undefined;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: PropType<string[]>;
        default: undefined;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:error"?: ((...args: any[]) => any) | undefined;
    "onUpdate:error-messages"?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    error: boolean;
    items: SelectBtnItem[];
    modelValue: SelectBtnValue;
    multiple: boolean;
    readonly: boolean;
    inline: boolean;
    hint: string;
    errorMessages: string[];
}, {}>;

declare enum SizeEnum {
    X_LARGE = "xl",
    LARGE = "l",
    MEDIUM = "m",
    SMALL = "s"
}

export declare const SkipLink: DefineComponent<{
    label: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
}, unknown, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    label: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
}>>, {
    label: string;
    target: string;
}, {}>;

export declare const state: NotificationState;

declare enum StateEnum {
    IDLE = "idle",
    PENDING = "pending",
    REJECTED = "rejected",
    RESOLVED = "resolved"
}

export declare const SubHeader: DefineComponent<{
    hideBackBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    backBtnText: {
        type: StringConstructor;
        default: string;
    };
    titleText: {
        type: StringConstructor;
        default: undefined;
    };
    subTitleText: {
        type: StringConstructor;
        default: undefined;
    };
    dataListGroupItems: {
        type: PropType<DataListGroupItems_2 | undefined>;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderHtmlValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    backArrowIcon: string;
    locales: {
        backBtnText: string;
    };
}, {
    fadeWhite(): string;
}, {
    emitItemAction(eventValue: DataListActionEvent): void;
}, Customizable | DefineComponent<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}, unknown, unknown, {
    widthStyles(): IndexedObject<string | undefined>;
}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    maxWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    minWidth: {
        type: NumberOrNumberString;
        default: undefined;
    };
    width: {
        type: NumberOrNumberString;
        default: string;
    };
}>>, {
    maxWidth: string | number | undefined;
    minWidth: string | number | undefined;
    width: string | number | undefined;
}, {}>, ComponentOptionsMixin, ("click:list-item" | "back")[], "click:list-item" | "back", PublicProps, Readonly<ExtractPropTypes<{
    hideBackBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    backBtnText: {
        type: StringConstructor;
        default: string;
    };
    titleText: {
        type: StringConstructor;
        default: undefined;
    };
    subTitleText: {
        type: StringConstructor;
        default: undefined;
    };
    dataListGroupItems: {
        type: PropType<DataListGroupItems_2 | undefined>;
        default: undefined;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    renderHtmlValue: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    "onClick:list-item"?: ((...args: any[]) => any) | undefined;
    onBack?: ((...args: any[]) => any) | undefined;
}, {
    loading: boolean;
    renderHtmlValue: boolean;
    hideBackBtn: boolean;
    backBtnText: string;
    titleText: string;
    subTitleText: string;
    dataListGroupItems: DataListGroupItems_2 | undefined;
}, {}>;

export declare const TableToolbar: DefineComponent<{
    nbTotal: {
        type: NumberConstructor;
        required: true;
    };
    nbFiltered: {
        type: NumberConstructor;
        default: undefined;
    };
    search: {
        type: StringConstructor;
        default: undefined;
    };
    searchLabel: {
        type: StringConstructor;
        default: string;
    };
    rowText: {
        type: StringConstructor;
        default: string;
    };
    showAddBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    addBtnLabel: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    locales: {
        rowText: (text: string, plural: boolean) => string;
        search: string;
        defaultRowText: string;
        addBtnLabel: string;
    };
    searchIcon: string;
    addIcon: string;
}, {
    showRowsNumber(): boolean;
    computedNbRows(): string;
    computedRowsText(): string;
    textFieldClasses(): string;
    isXs(): boolean;
}, {}, Customizable, ComponentOptionsMixin, ("click" | "update:search")[], "click" | "update:search", PublicProps, Readonly<ExtractPropTypes<{
    nbTotal: {
        type: NumberConstructor;
        required: true;
    };
    nbFiltered: {
        type: NumberConstructor;
        default: undefined;
    };
    search: {
        type: StringConstructor;
        default: undefined;
    };
    searchLabel: {
        type: StringConstructor;
        default: string;
    };
    rowText: {
        type: StringConstructor;
        default: string;
    };
    showAddBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    addBtnLabel: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
}, {
    search: string;
    loading: boolean;
    nbFiltered: number;
    searchLabel: string;
    rowText: string;
    showAddBtn: boolean;
    addBtnLabel: string;
}, {}>;

declare enum ThemeEnum {
    AMELI = "ameli",
    AMELI_PRO = "ameli-pro",
    CNAM = "cnam",
    COMPTE_AMELI = "compte-ameli",
    COMPTE_ENTREPRISE = "compte-entreprise",
    DEFAULT = "default",
    RISQUE_PRO = "risque-pro"
}

export declare const TODAY: string;

declare type UnknownValue = any;

declare type UnknownValue_2 = any;

export declare const UserMenuBtn: DefineComponent<{
    fullName: {
        type: StringConstructor;
        required: true;
    };
    additionalInformation: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    hideUserIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLogoutBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    $refs: any;
    locales: {
        label: string;
        logout: string;
    };
    userIcon: string;
    logoutIcon: string;
}, {
    btnPadding(): string;
    hasListContent(): boolean;
    isMobileVersion(): boolean;
    isMobileWithIcon(): boolean;
}, {}, Customizable, ComponentOptionsMixin, {}, string, PublicProps, Readonly<ExtractPropTypes<{
    fullName: {
        type: StringConstructor;
        required: true;
    };
    additionalInformation: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    hideUserIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideLogoutBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    mobileVersion: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    label: string;
    mobileVersion: boolean;
    additionalInformation: string;
    hideUserIcon: boolean;
    hideLogoutBtn: boolean;
}, {}>;

export declare type Value = string | string[] | null;

export declare const WEEKEND_DAYS: string[];

export { }
